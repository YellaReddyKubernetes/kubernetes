# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: Terraform CI/CD

on:
  pull_request:
    branches: [dev, stage, prod]
    paths:
      - 'infra-automation-labs/modules/environments/**'
  push:
    branches: [dev, stage, prod]
    paths:
      - 'infra-automation-labs/modules/environments/**'

jobs:
  terraform:
    name: Terraform Plan or Apply
    runs-on: ubuntu-latest

    env:
      TF_IN_AUTOMATION: true
      AWS_REGION: ap-south-1

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Environment Path
        id: set-env
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          echo "Branch is $BRANCH_NAME"
          if [[ "$BRANCH_NAME" == "dev" ]]; then
           echo "env_path=infra-automation-labs/modules/environments/dev" >> "$GITHUB_OUTPUT"
          elif [[ "$BRANCH_NAME" == "stage" ]]; then
          echo "env_path=infra-automation-labs/modules/environments/stage" >> "$GITHUB_OUTPUT"
          elif [[ "$BRANCH_NAME" == "prod" ]]; then
          echo "env_path=infra-automation-labs/modules/environments/prod" >> "$GITHUB_OUTPUT"
          else
          echo "Unknown branch: $BRANCH_NAME"
          exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ steps.set-env.outputs.env_path }}

      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: ${{ steps.set-env.outputs.env_path }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ steps.set-env.outputs.env_path }}

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: terraform plan -input=false -var-file="terraform.tfvars"
        working-directory: ${{ steps.set-env.outputs.env_path }}

      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -var-file="terraform.tfvars"
        working-directory: ${{ steps.set-env.outputs.env_path }}
